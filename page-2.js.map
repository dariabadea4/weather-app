{"version":3,"file":"page-2.js","sources":["../src/scripts/input-cards-api-logic.js","../src/scripts/chart.js","../src/scripts/main-pag-2.js"],"sourcesContent":["import { inputData } from \"./city-input\";\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const apiKey = \"20ffa3f3195f1b01715c348123da79a3\";\n\n  // Funcția pentru a obține datele meteo\n  async function getWeather(location) {\n    if (!location) {\n      alert(\"Please enter a city name\");\n      return;\n    }\n\n    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=metric&appid=${apiKey}`;\n\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"City not found\");\n      }\n      const data = await response.json();\n      displayWeather(data);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n\n\n  // Funcția pentru a afișa datele meteo pe zile\n  function displayWeather(data) {\n    const weatherCardsContainer = document.getElementById('weather-cards');\n    const moreInfoContainer = document.getElementById('more-info-container');\n\n    weatherCardsContainer.innerHTML = '';\n    moreInfoContainer.innerHTML = '';\n\n    const filteredData = data.list.filter(item => item.dt_txt.includes('12:00:00'));\n\n    // Parcurgem fiecare zi și creăm carduri pentru vreme\n    filteredData.forEach((day, index) => {\n      const weatherCard = document.createElement('div');\n      weatherCard.classList.add('weather-card-initial');\n\n      const date = new Date(day.dt_txt);\n      const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });\n      const formattedDate = date.toLocaleDateString('en-GB', { day: 'numeric', month: 'short' });\n      const icon = day.weather[0].icon;\n      const min = Math.round(day.main.temp_min);\n      const max = Math.round(day.main.temp_max);\n\n      weatherCard.innerHTML = `\n      <div class=\"day-weather\">${dayOfWeek}</div>\n      <div class=\"date\">${formattedDate}</div>\n      <img src=\"http://openweathermap.org/img/wn/${icon}.png\" alt=\"${day.weather[0].description}\">\n      <div class=\"min-max\">\n        <div class=\"min\">\n          <div>min</div>\n          <div class=\"degrees\">${min}</div>\n        </div>\n        <div class=\"line\"></div>\n        <div class=\"max\">\n          <div>max</div>\n          <div class=\"degrees\">${max}</div>\n        </div>\n      </div>\n      <button class=\"more-info-btn\">more info</button>\n    `;\n\n      weatherCard.querySelector('.more-info-btn').addEventListener('click', () => toggleDetails(index, data));\n\n      weatherCardsContainer.appendChild(weatherCard);\n    });\n  }\n\n  // Funcția pentru a afișa sau ascunde secțiunea \"More Info\"\n  // Funcția pentru a afișa sau ascunde secțiunea \"More Info\"\n  function toggleDetails(index, data) {\n    const moreInfoContainer = document.getElementById('more-info-container');\n    const allDays = document.querySelectorAll('.weather-card-initial .day-weather');\n\n    // Verificăm dacă secțiunea este deja afișată\n    if (!moreInfoContainer.classList.contains('hidden') && moreInfoContainer.getAttribute('data-index') == index) {\n      moreInfoContainer.classList.add('hidden');\n      moreInfoContainer.innerHTML = ''; // Golim conținutul\n      allDays.forEach(day => day.classList.remove('selected-day')); // Eliminăm clasa 'selected-day'\n      return;\n    }\n\n    moreInfoContainer.classList.remove('hidden');\n    moreInfoContainer.setAttribute('data-index', index);\n\n    // Golim secțiunea înainte de a adăuga conținut nou\n    moreInfoContainer.innerHTML = '';\n\n    const dayData = data.list.slice(index * 8, index * 8 + 7); // Extragem doar primele 7 ore\n\n    allDays.forEach(day => day.classList.remove('selected-day'));\n    const selectedDay = document.querySelectorAll('.weather-card-initial')[index].querySelector('.day-weather');\n    selectedDay.classList.add('selected-day');\n\n    // Afișăm primele 5 carduri by default\n    dayData.forEach((hour, i) => {\n      const hourDiv = document.createElement('div');\n      const time = new Date(hour.dt_txt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n      const temp = Math.round(hour.main.temp);\n      const icon = hour.weather[0].icon;\n      const precip = hour.rain ? hour.rain['3h'] || hour.rain['1h'] || 0 : 0;\n      const humidity = hour.main.humidity;\n      const wind = hour.wind.speed;\n\n      hourDiv.classList.add('hourly-info');\n      if (i < 5) {\n        hourDiv.classList.add('active'); // Afișăm primele 5 carduri by default\n      }\n\n      hourDiv.innerHTML = `\n        <div class=\"weather-card\">\n            <div class=\"time\">${time}</div>\n            <img src=\"http://openweathermap.org/img/wn/${icon}.png\" alt=\"${hour.weather[0].description}\">\n            <div class=\"degrees\">${temp}°C</div>\n            <div class=\"weather-properties\">\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${precip} mm</p>\n                </div>\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${humidity}%</p>\n                </div>\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${wind} m/s</p>\n                </div>\n            </div>\n        </div>\n      `;\n      moreInfoContainer.appendChild(hourDiv);\n    });\n\n\n    let currentIndex = 0;\n\n    const updateSlide = (direction) => {\n      const allCards = document.querySelectorAll('.hourly-info');\n      const totalCards = allCards.length;\n      const visibleCards = Array.from(allCards).slice(currentIndex, currentIndex + 5);\n      const hiddenCards = Array.from(allCards).slice(currentIndex + 5);\n\n\n      visibleCards.forEach(card => card.classList.remove('active'));\n\n      currentIndex += direction;\n      if (currentIndex < 0) currentIndex = 0;\n      if (currentIndex > totalCards - 5) currentIndex = totalCards - 5;\n\n      const newVisibleCards = Array.from(allCards).slice(currentIndex, currentIndex + 5);\n      newVisibleCards.forEach(card => card.classList.add('active'));\n    };\n\n    document.getElementById('prev-slide').addEventListener('click', () => updateSlide(-1));\n    document.getElementById('next-slide').addEventListener('click', () => updateSlide(1));\n\n\n    let startX = 0;\n\n    moreInfoContainer.addEventListener('touchstart', (e) => {\n      startX = e.touches[0].clientX;\n    });\n\n    moreInfoContainer.addEventListener('touchend', (e) => {\n      const endX = e.changedTouches[0].clientX;\n      const deltaX = startX - endX;\n\n      if (deltaX > 50) { // Swipe left\n        updateSlide(1);\n      } else if (deltaX < -50) { // Swipe right\n        updateSlide(-1);\n      }\n    });\n  }\n// Funcția pentru a afișa sau ascunde secțiunea \"More Info\"\n  function toggleDetails(index, data) {\n    const moreInfoContainer = document.getElementById('more-info-container');\n    const allDays = document.querySelectorAll('.weather-card-initial .day-weather');\n\n    // Verificăm dacă secțiunea este deja afișată\n    if (!moreInfoContainer.classList.contains('hidden') && moreInfoContainer.getAttribute('data-index') == index) {\n      moreInfoContainer.classList.add('hidden');\n      moreInfoContainer.innerHTML = ''; // Golim conținutul\n      allDays.forEach(day => day.classList.remove('selected-day')); // Eliminăm clasa 'selected-day'\n      return;\n    }\n\n    moreInfoContainer.classList.remove('hidden');\n    moreInfoContainer.setAttribute('data-index', index);\n\n    // Golim secțiunea înainte de a adăuga conținut nou\n    moreInfoContainer.innerHTML = '';\n\n    const dayData = data.list.slice(index * 8, index * 8 + 7); // Extragem doar primele 7 ore\n\n    allDays.forEach(day => day.classList.remove('selected-day'));\n    const selectedDay = document.querySelectorAll('.weather-card-initial')[index].querySelector('.day-weather');\n    selectedDay.classList.add('selected-day');\n\n    // Cream un container scrollable pentru cardurile orare\n    const scrollableContainer = document.createElement('div');\n    scrollableContainer.classList.add('more-info-scrollable');\n\n    // Afișăm cardurile orare\n    dayData.forEach(hour => {\n      const hourDiv = document.createElement('div');\n      const time = new Date(hour.dt_txt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n      const temp = Math.round(hour.main.temp);\n      const icon = hour.weather[0].icon;\n      const precip = hour.rain ? hour.rain['3h'] || hour.rain['1h'] || 0 : 0;\n      const humidity = hour.main.humidity;\n      const wind = hour.wind.speed;\n\n      hourDiv.classList.add('hourly-info');\n      hourDiv.innerHTML = `\n        <div class=\"weather-card\">\n            <div class=\"time\">${time}</div>\n            <img src=\"http://openweathermap.org/img/wn/${icon}.png\" alt=\"${hour.weather[0].description}\">\n            <div class=\"degrees\">${temp}°C</div>\n            <div class=\"weather-properties\">\n                <div class=\"property-details\">\n                    <img src=\"/001-percip.png\" alt=\"\">\n                    <p class=\"property-detail\">${precip} mm</p>\n                </div>\n                <div class=\"property-details\">\n                   <img src=\"/002-humidity.png\" alt=\"\">\n                    <p class=\"property-detail\">${humidity}%</p>\n                </div>\n                <div class=\"property-details\">\n                    <img src=\"/003-wind.png\" alt=\"\">\n                    <p class=\"property-detail\">${wind} m/s</p>\n                </div>\n            </div>\n        </div>\n      `;\n      scrollableContainer.appendChild(hourDiv);\n    });\n\n    // Funcția pentru derularea containerului cu carduri\n    const weatherCardsContainer = document.getElementById('weather-cards');\n    const leftArrow = document.getElementById('left-arrow');\n    const rightArrow = document.getElementById('right-arrow');\n\n    leftArrow.addEventListener('click', () => {\n      weatherCardsContainer.scrollBy({ left: -300, behavior: 'smooth' });\n    });\n\n    rightArrow.addEventListener('click', () => {\n      weatherCardsContainer.scrollBy({ left: 300, behavior: 'smooth' });\n    });\n\n    // Adăugăm containerul scrollable la secțiunea more-info\n    moreInfoContainer.appendChild(scrollableContainer);\n\n    // Logica pentru swipe pe dispozitive mobile\n    let startX = 0;\n\n    scrollableContainer.addEventListener('touchstart', (e) => {\n      startX = e.touches[0].clientX;\n    });\n\n    scrollableContainer.addEventListener('touchend', (e) => {\n      const endX = e.changedTouches[0].clientX;\n      const deltaX = startX - endX;\n\n      if (deltaX > 50) {\n        scrollableContainer.scrollBy({ left: 300, behavior: 'smooth' }); // Scroll la dreapta\n      } else if (deltaX < -50) {\n        scrollableContainer.scrollBy({ left: -300, behavior: 'smooth' }); // Scroll la stânga\n      }\n    });\n  }\n\n  // let debounceTimer;\n  // document.getElementById('city-input').addEventListener('input', function() {\n  //   clearTimeout(debounceTimer);\n  //   debounceTimer = setTimeout(getWeather, 500);\n  // });\n  // document.getElementById('get-weather-btn').addEventListener('click', getWeather);\n  document.querySelector('#city-input').addEventListener('change',()=>{\n    getWeather(inputData)\n  });\n  document.querySelector('.viewed-city__favorites-container').addEventListener('click',(e)=>{\n    if(e.target.nodeName != 'BUTTON'){\n      return\n    }\n    getWeather(inputData)\n  });\n});\n\n","import Chart from 'chart.js/auto';\n\n// Initialize the weatherChart variable\nlet weatherChart;\n\n// Function to update the chart with new data\nfunction updateChart(data) {\n  console.log('Updating the chart with the following data:', data);\n  const ctx = document.querySelector('.weatherChart').getContext('2d');\n\n  // Destroy existing chart if it exists\n  if (weatherChart) {\n    console.log('Destroying the existing chart...');\n    weatherChart.destroy();\n  }\n\n  // Create a new chart with updated data\n  try {\n    weatherChart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: data.labels,\n        datasets: [\n          {\n            label: 'Temperature, C°',\n          data: data.temps,\n          borderColor: 'rgba(255, 107, 9, 1)',\n          backgroundColor: 'rgba(255, 107, 9, 1)',\n          borderWidth: 2\n          \n          },\n          {\n            label: 'Humidity, %',\n            data: data.humidity,\n            borderColor: 'rgba(9, 6, 235, 1)',\n            backgroundColor: 'rgba(9, 6, 235, 1)',\n            borderWidth: 2\n          },\n          {\n            label: 'Wind Speed, m/s',\n          data: data.windSpeed,\n          borderColor: 'rgba(234, 154, 5, 1)',\n          backgroundColor: 'rgba(234, 154, 5, 1)',\n          borderWidth: 2\n          },\n          {\n            label: 'Atmospheric Pressure, m/m',\n            data: data.pressure,\n            borderColor: 'rgba(6, 120, 6, 1)',\n            backgroundColor: 'rgba(6, 120, 6, 1)',\n            borderWidth: 2\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        },\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top',\n            labels: {\n              boxWidth: 15,\n              boxHeight: 12,\n              usePointStyle: false\n            },\n            onClick: (e, legendItem) => {\n              const index = legendItem.datasetIndex;\n              const dataset = weatherChart.data.datasets[index];\n              dataset.hidden = !dataset.hidden;\n              weatherChart.update();\n            }\n          }\n        }\n      }\n    });\n    console.log('The chart has been successfully updated.');\n  } catch (error) {\n    console.error('Error creating the chart:', error);\n  }\n}\n\n// Function to fetch weather data from the API\nasync function fetchWeatherData(city) {\n  console.log(`Fetching weather data for city: ${city}`);\n  const apiKey = \"20ffa3f3195f1b01715c348123da79a3\";\n  const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${apiKey}`;\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Error fetching data: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Weather data retrieved successfully:', data);\n\n    // Filter data for 12:00 to get daily data\n    const filteredData = data.list.filter(item => item.dt_txt.includes('12:00:00'));\n    console.log('Filtered data for 12:00:', filteredData);\n\n    // Return processed data\n    return {\n      temps: filteredData.map(item => item.main.temp),\n      humidity: filteredData.map(item => item.main.humidity),\n      windSpeed: filteredData.map(item => item.wind.speed),\n      pressure: filteredData.map(item => item.main.pressure),\n      labels: filteredData.map(item => new Date(item.dt_txt).toLocaleDateString('en-GB', { day: 'numeric', month: 'short' }))\n    };\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw error;\n  }\n}\n\n// Initialize the chart when the city is selected\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('Document has fully loaded.');\n\n  // Set up city selection change listener\n  document.getElementById('city-input').addEventListener('change', async function () {\n    const selectedCity = this.value.trim();\n    console.log(`Selected city: ${selectedCity}`);\n\n    if (selectedCity) {\n      try {\n        // Fetch weather data from the API\n        const weatherData = await fetchWeatherData(selectedCity);\n\n        // Update the chart data\n        updateChart(weatherData);\n\n        // Show the \"Show Chart\" button if hidden\n        const toggleButton = document.querySelector('.toggleChartBtn');\n        toggleButton.style.display = 'block';\n        toggleButton.textContent = 'Show Chart';\n\n      } catch (error) {\n        console.error('Error retrieving weather data in event listener:', error);\n      }\n    }\n  });\n\n  // Button to toggle showing/hiding the chart\n  document.querySelector('.toggleChartBtn').addEventListener('click', function () {\n    const chartContainer = document.querySelector('.chart-container');\n    toggleChartVisibility(chartContainer, this);\n  });\n\n  // Ensure both the chart container and the button are hidden on page load\n  document.querySelector('.chart-container').style.display = 'none';\n  document.querySelector('.toggleChartBtn').style.display = 'none'; // Ensure the button is hidden on load\n});\n\n// Function to toggle the visibility of the chart container\nfunction toggleChartVisibility(chartContainer, toggleButton) {\n  if (chartContainer.style.display === 'none' || chartContainer.style.display === '') {\n    chartContainer.style.display = 'block';\n    toggleButton.textContent = 'Hide Chart';\n  } else {\n    chartContainer.style.display = 'none';\n    toggleButton.textContent = 'Show Chart';\n  }\n}\n","import './city-input.js';\nimport './input-cards-api-logic.js';\nimport './city-input__favorites.js';\nimport './chart.js'\n\n\nif (document.URL.includes('pag-2')) {\n    document.querySelector('#five-days-btn').classList.add('selected')\n}\n"],"names":["apiKey","getWeather","location","url","response","data","displayWeather","error","weatherCardsContainer","moreInfoContainer","item","day","index","weatherCard","date","dayOfWeek","formattedDate","icon","min","max","toggleDetails","allDays","dayData","scrollableContainer","hour","hourDiv","time","temp","precip","humidity","wind","leftArrow","rightArrow","startX","e","endX","deltaX","inputData","weatherChart","updateChart","ctx","Chart","legendItem","dataset","fetchWeatherData","city","filteredData","selectedCity","weatherData","toggleButton","chartContainer","toggleChartVisibility"],"mappings":"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"}