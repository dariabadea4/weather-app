{"version":3,"file":"index.js","sources":["../src/scripts/city-input__functions.js","../src/scripts/city-input.js","../src/scripts/input-cards-api-logic.js","../src/scripts/city-input__favorites.js","../src/scripts/quote.js"],"sourcesContent":["const favorites = document.querySelector('.viewed-city__favorites-container'),\n  nextBtn = document.querySelector('.viewed-city__next'),\n  prevBtn = document.querySelector('.viewed-city__prev');\n\nlet itemsOnPage,\n    currentPage = 0;\n\n// store cities in local storage\nconst setCity = (key, value) => {\n  try {\n    const oras = JSON.stringify(value);\n    localStorage.setItem(key, oras);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n//   retrieve cities from local storage\nconst getCity = key => {\n  try {\n    const data = localStorage.getItem(key);\n    return data === null ? undefined : JSON.parse(data);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// check how many cities are in favorites\nconst checkLength = (arr, number)=>{\n  switch (true) {\n    case (arr.length > 4):\n      nextBtn.classList.remove('hidden')\n      break;\n    default:\n      nextBtn.classList.add('hidden')\n      break;\n  }\n  switch (true) {\n    case (number > 0):\n      prevBtn.classList.remove('hidden')\n      break;\n  \n    default:\n      prevBtn.classList.add('hidden')\n      break;\n  }\n}\n\n// not actually getting the location\nconst getLocation=()=>{\n  setTimeout(() => {\n    alert(\"Couldn't get locaton, please try again later\")\n  }, 2000);\n}\n\n\n// check the size of the page\nconst checkPageSize=(number)=>{\n  switch (true) {\n    case (number < 500 && number > 400):\n      itemsOnPage = 3;\n      break;\n    case (number < 400):\n      itemsOnPage = 2;\n      break;\n    default:\n      itemsOnPage = 4;\n      break;\n  }\n}\n\n// create city object\nconst newCity = (cityName) => ({ \n  cityName :cityName, \n  id: Math.floor((Math.random()*200)+1)\n});\n\nconst saveCity = value => {\n  const cityObj = newCity(value)\n  const currentState = getCity('orase');\n  if (currentState === undefined) {\n    setCity('orase', [cityObj]);\n  } else {\n    const cityObj = newCity(value)\n    currentState.push(cityObj);\n    setCity('orase', currentState);\n  }\n};\n\nconst shortWord = (str, maxLength) => {\n  if(!str){\n    return\n  }\n  if (str.length > maxLength) {\n    return str.substring(0, maxLength) + '...';\n  }\n  return str;\n};\n\n// populate favorites list\n\nconst populateFavorites = () => {\n  const cities = getCity('orase');\n  if (cities === undefined) {\n    return;\n  } else {\n    checkPageSize(window.innerWidth)\n    checkLength(cities, currentPage)\n    favorites.innerHTML = '';\n    const begin = currentPage * itemsOnPage,\n      end = begin + itemsOnPage,\n      pageItems = cities.slice(begin, end);\n\n    pageItems.forEach(item => {\n      const shortCity = shortWord(item.cityName, 6);\n      const favorite = `<button class=\"viewed-city\" type=\"button\" value=\"${shortCity}\"data-id=\"${item.id}\">\n                                  ${shortCity}\n                                  <svg class=\"viewed-city__close-btn\" data-id=\"${item.id}\">\n                                      <use href =\"./city-input-icons.svg#icon-close\"></use>\n                                  </svg>\n                              </button>`;\n      favorites.insertAdjacentHTML('beforeend', favorite);\n    });\n  }\n};\n\nconst nextPage = pageNumber => {\n  const cities = getCity('orase');\n  if ((pageNumber + 1) * itemsOnPage < cities.length) {\n    currentPage++;\n    populateFavorites();\n  }\n};\n\nconst prevPage = pageNumber => {\n  if (pageNumber >= 1) {\n    currentPage--;\n    populateFavorites();\n    console.log(currentPage);\n  }\n};\n\nexport {\n  setCity,\n  getCity,\n  saveCity,\n  populateFavorites,\n  nextPage,\n  prevPage,\n  getLocation,\n  currentPage,\n};\n","import { saveCity, populateFavorites } from \"./city-input__functions\";\n\nconst input = document.querySelector('.city-input__field'),\n      favorites= document.querySelector('.star');\nlet inputData;\n\ninput.addEventListener('change', e => {\n  inputData = e.target.value;\n});\n\nfavorites.addEventListener('click', () => {\n  saveCity(inputData);\n  populateFavorites();\n});\n\nexport {inputData};","import { inputData } from \"./city-input\";\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const apiKey = \"20ffa3f3195f1b01715c348123da79a3\";\n\n  // Funcția pentru a obține datele meteo\n  async function getWeather(location) {\n    if (!location) {\n      alert(\"Please enter a city name\");\n      return;\n    }\n\n    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=metric&appid=${apiKey}`;\n\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"City not found\");\n      }\n      const data = await response.json();\n      displayWeather(data);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n\n\n  // Funcția pentru a afișa datele meteo pe zile\n  function displayWeather(data) {\n    const weatherCardsContainer = document.getElementById('weather-cards');\n    const moreInfoContainer = document.getElementById('more-info-container');\n\n    weatherCardsContainer.innerHTML = '';\n    moreInfoContainer.innerHTML = '';\n\n    const filteredData = data.list.filter(item => item.dt_txt.includes('12:00:00'));\n\n    // Parcurgem fiecare zi și creăm carduri pentru vreme\n    filteredData.forEach((day, index) => {\n      const weatherCard = document.createElement('div');\n      weatherCard.classList.add('weather-card-initial');\n\n      const date = new Date(day.dt_txt);\n      const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });\n      const formattedDate = date.toLocaleDateString('en-GB', { day: 'numeric', month: 'short' });\n      const icon = day.weather[0].icon;\n      const min = Math.round(day.main.temp_min);\n      const max = Math.round(day.main.temp_max);\n\n      weatherCard.innerHTML = `\n      <div class=\"day-weather\">${dayOfWeek}</div>\n      <div class=\"date\">${formattedDate}</div>\n      <img src=\"http://openweathermap.org/img/wn/${icon}.png\" alt=\"${day.weather[0].description}\">\n      <div class=\"min-max\">\n        <div class=\"min\">\n          <div>min</div>\n          <div class=\"degrees\">${min}</div>\n        </div>\n        <div class=\"line\"></div>\n        <div class=\"max\">\n          <div>max</div>\n          <div class=\"degrees\">${max}</div>\n        </div>\n      </div>\n      <button class=\"more-info-btn\">more info</button>\n    `;\n\n      weatherCard.querySelector('.more-info-btn').addEventListener('click', () => toggleDetails(index, data));\n\n      weatherCardsContainer.appendChild(weatherCard);\n    });\n  }\n\n  // Funcția pentru a afișa sau ascunde secțiunea \"More Info\"\n  // Funcția pentru a afișa sau ascunde secțiunea \"More Info\"\n  function toggleDetails(index, data) {\n    const moreInfoContainer = document.getElementById('more-info-container');\n    const allDays = document.querySelectorAll('.weather-card-initial .day-weather');\n\n    // Verificăm dacă secțiunea este deja afișată\n    if (!moreInfoContainer.classList.contains('hidden') && moreInfoContainer.getAttribute('data-index') == index) {\n      moreInfoContainer.classList.add('hidden');\n      moreInfoContainer.innerHTML = ''; // Golim conținutul\n      allDays.forEach(day => day.classList.remove('selected-day')); // Eliminăm clasa 'selected-day'\n      return;\n    }\n\n    moreInfoContainer.classList.remove('hidden');\n    moreInfoContainer.setAttribute('data-index', index);\n\n    // Golim secțiunea înainte de a adăuga conținut nou\n    moreInfoContainer.innerHTML = '';\n\n    const dayData = data.list.slice(index * 8, index * 8 + 7); // Extragem doar primele 7 ore\n\n    allDays.forEach(day => day.classList.remove('selected-day'));\n    const selectedDay = document.querySelectorAll('.weather-card-initial')[index].querySelector('.day-weather');\n    selectedDay.classList.add('selected-day');\n\n    // Afișăm primele 5 carduri by default\n    dayData.forEach((hour, i) => {\n      const hourDiv = document.createElement('div');\n      const time = new Date(hour.dt_txt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n      const temp = Math.round(hour.main.temp);\n      const icon = hour.weather[0].icon;\n      const precip = hour.rain ? hour.rain['3h'] || hour.rain['1h'] || 0 : 0;\n      const humidity = hour.main.humidity;\n      const wind = hour.wind.speed;\n\n      hourDiv.classList.add('hourly-info');\n      if (i < 5) {\n        hourDiv.classList.add('active'); // Afișăm primele 5 carduri by default\n      }\n\n      hourDiv.innerHTML = `\n        <div class=\"weather-card\">\n            <div class=\"time\">${time}</div>\n            <img src=\"http://openweathermap.org/img/wn/${icon}.png\" alt=\"${hour.weather[0].description}\">\n            <div class=\"degrees\">${temp}°C</div>\n            <div class=\"weather-properties\">\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${precip} mm</p>\n                </div>\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${humidity}%</p>\n                </div>\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${wind} m/s</p>\n                </div>\n            </div>\n        </div>\n      `;\n      moreInfoContainer.appendChild(hourDiv);\n    });\n\n\n    let currentIndex = 0;\n\n    const updateSlide = (direction) => {\n      const allCards = document.querySelectorAll('.hourly-info');\n      const totalCards = allCards.length;\n      const visibleCards = Array.from(allCards).slice(currentIndex, currentIndex + 5);\n      const hiddenCards = Array.from(allCards).slice(currentIndex + 5);\n\n\n      visibleCards.forEach(card => card.classList.remove('active'));\n\n      currentIndex += direction;\n      if (currentIndex < 0) currentIndex = 0;\n      if (currentIndex > totalCards - 5) currentIndex = totalCards - 5;\n\n      const newVisibleCards = Array.from(allCards).slice(currentIndex, currentIndex + 5);\n      newVisibleCards.forEach(card => card.classList.add('active'));\n    };\n\n    document.getElementById('prev-slide').addEventListener('click', () => updateSlide(-1));\n    document.getElementById('next-slide').addEventListener('click', () => updateSlide(1));\n\n\n    let startX = 0;\n\n    moreInfoContainer.addEventListener('touchstart', (e) => {\n      startX = e.touches[0].clientX;\n    });\n\n    moreInfoContainer.addEventListener('touchend', (e) => {\n      const endX = e.changedTouches[0].clientX;\n      const deltaX = startX - endX;\n\n      if (deltaX > 50) { // Swipe left\n        updateSlide(1);\n      } else if (deltaX < -50) { // Swipe right\n        updateSlide(-1);\n      }\n    });\n  }\n// Funcția pentru a afișa sau ascunde secțiunea \"More Info\"\n  function toggleDetails(index, data) {\n    const moreInfoContainer = document.getElementById('more-info-container');\n    const allDays = document.querySelectorAll('.weather-card-initial .day-weather');\n\n    // Verificăm dacă secțiunea este deja afișată\n    if (!moreInfoContainer.classList.contains('hidden') && moreInfoContainer.getAttribute('data-index') == index) {\n      moreInfoContainer.classList.add('hidden');\n      moreInfoContainer.innerHTML = ''; // Golim conținutul\n      allDays.forEach(day => day.classList.remove('selected-day')); // Eliminăm clasa 'selected-day'\n      return;\n    }\n\n    moreInfoContainer.classList.remove('hidden');\n    moreInfoContainer.setAttribute('data-index', index);\n\n    // Golim secțiunea înainte de a adăuga conținut nou\n    moreInfoContainer.innerHTML = '';\n\n    const dayData = data.list.slice(index * 8, index * 8 + 7); // Extragem doar primele 7 ore\n\n    allDays.forEach(day => day.classList.remove('selected-day'));\n    const selectedDay = document.querySelectorAll('.weather-card-initial')[index].querySelector('.day-weather');\n    selectedDay.classList.add('selected-day');\n\n    // Cream un container scrollable pentru cardurile orare\n    const scrollableContainer = document.createElement('div');\n    scrollableContainer.classList.add('more-info-scrollable');\n\n    // Afișăm cardurile orare\n    dayData.forEach(hour => {\n      const hourDiv = document.createElement('div');\n      const time = new Date(hour.dt_txt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n      const temp = Math.round(hour.main.temp);\n      const icon = hour.weather[0].icon;\n      const precip = hour.rain ? hour.rain['3h'] || hour.rain['1h'] || 0 : 0;\n      const humidity = hour.main.humidity;\n      const wind = hour.wind.speed;\n\n      hourDiv.classList.add('hourly-info');\n      hourDiv.innerHTML = `\n        <div class=\"weather-card\">\n            <div class=\"time\">${time}</div>\n            <img src=\"http://openweathermap.org/img/wn/${icon}.png\" alt=\"${hour.weather[0].description}\">\n            <div class=\"degrees\">${temp}°C</div>\n            <div class=\"weather-properties\">\n                <div class=\"property-details\">\n                    <img src=\"/001-percip.png\" alt=\"\">\n                    <p class=\"property-detail\">${precip} mm</p>\n                </div>\n                <div class=\"property-details\">\n                   <img src=\"/002-humidity.png\" alt=\"\">\n                    <p class=\"property-detail\">${humidity}%</p>\n                </div>\n                <div class=\"property-details\">\n                    <img src=\"/003-wind.png\" alt=\"\">\n                    <p class=\"property-detail\">${wind} m/s</p>\n                </div>\n            </div>\n        </div>\n      `;\n      scrollableContainer.appendChild(hourDiv);\n    });\n\n    // Funcția pentru derularea containerului cu carduri\n    const weatherCardsContainer = document.getElementById('weather-cards');\n    const leftArrow = document.getElementById('left-arrow');\n    const rightArrow = document.getElementById('right-arrow');\n\n    leftArrow.addEventListener('click', () => {\n      weatherCardsContainer.scrollBy({ left: -300, behavior: 'smooth' });\n    });\n\n    rightArrow.addEventListener('click', () => {\n      weatherCardsContainer.scrollBy({ left: 300, behavior: 'smooth' });\n    });\n\n    // Adăugăm containerul scrollable la secțiunea more-info\n    moreInfoContainer.appendChild(scrollableContainer);\n\n    // Logica pentru swipe pe dispozitive mobile\n    let startX = 0;\n\n    scrollableContainer.addEventListener('touchstart', (e) => {\n      startX = e.touches[0].clientX;\n    });\n\n    scrollableContainer.addEventListener('touchend', (e) => {\n      const endX = e.changedTouches[0].clientX;\n      const deltaX = startX - endX;\n\n      if (deltaX > 50) {\n        scrollableContainer.scrollBy({ left: 300, behavior: 'smooth' }); // Scroll la dreapta\n      } else if (deltaX < -50) {\n        scrollableContainer.scrollBy({ left: -300, behavior: 'smooth' }); // Scroll la stânga\n      }\n    });\n  }\n\n  // let debounceTimer;\n  // document.getElementById('city-input').addEventListener('input', function() {\n  //   clearTimeout(debounceTimer);\n  //   debounceTimer = setTimeout(getWeather, 500);\n  // });\n  // document.getElementById('get-weather-btn').addEventListener('click', getWeather);\n  document.querySelector('#city-input').addEventListener('change',()=>{\n    getWeather(inputData)\n  })\n});\n\n","import {\n  populateFavorites,\n  nextPage,\n  prevPage,\n  currentPage,\n  getCity,\n  getLocation,\n  setCity\n} from './city-input__functions';\n\n\nconst nextBtn = document.querySelector('.viewed-city__next'),\n      prevBtn = document.querySelector('.viewed-city__prev'),\n      favContainer = document.querySelector('.viewed-city__favorites-container');\n\n\nwindow.addEventListener('resize',()=>{\n  populateFavorites()\n})\n\nnextBtn.addEventListener('click', () => {nextPage(currentPage)});\n\nprevBtn.addEventListener('click', () => {prevPage(currentPage)});\n\n// Remove from favorites\nfavContainer.addEventListener('click', e => {\n  const selectedCity = e.target.parentNode.dataset.id,\n        cities = getCity('orase')\n  if (e.target.nodeName !== 'use' && e.target.nodeName !== 'svg') {\n    return;\n  }\n        const newList = cities.filter(city=> city.id != selectedCity);\n        setCity('orase', newList);\n        populateFavorites();\n});\n\n// document.querySelector('.location'),addEventListener('click',()=>{\n//   const answer = confirm('Would you like to allow the browser to get your location?');\n//   answer ? getLocation() : alert('Please enter a city then');\n// });\n\npopulateFavorites();\n\n\n","const quotes = [\n  {\n    text: \"The only limit to our realization of tomorrow is our doubts of today.\",\n    author: \"Franklin D. Roosevelt\",\n  },\n  {\n    text: \"Success is not final, failure is not fatal: It is the courage to continue that counts.\",\n    author: \"Winston Churchill\",\n  },\n  {\n    text: \"You miss 100% of the shots you don't take.\",\n    author: \"Wayne Gretzky\",\n  },\n  {\n    text: \"The best time to plant a tree was 20 years ago. The second best time is now.\",\n    author: \"Chinese Proverb\",\n  },\n  {\n    text: \"It always seems impossible until it's done.\",\n    author: \"Nelson Mandela\",\n  },\n  {\n    text: \"Don't watch the clock; do what it does. Keep going.\",\n    author: \"Sam Levenson\",\n  },\n  {\n    text: \"Whether you think you can or you think you can't, you're right.\",\n    author: \"Henry Ford\",\n  },\n];\n\nconst currentDay = new Date().getDay();\n\nconst currentQuote = quotes[currentDay];\n\ndocument.getElementById(\"quote-text\").textContent = currentQuote.text;\ndocument.getElementById(\"quote-author\").textContent = currentQuote.author;"],"names":["favorites","nextBtn","prevBtn","itemsOnPage","currentPage","setCity","key","value","oras","err","getCity","data","error","checkLength","arr","number","checkPageSize","newCity","cityName","saveCity","cityObj","currentState","shortWord","str","maxLength","populateFavorites","cities","begin","end","item","shortCity","favorite","nextPage","pageNumber","prevPage","input","inputData","e","apiKey","getWeather","location","url","response","displayWeather","weatherCardsContainer","moreInfoContainer","day","index","weatherCard","date","dayOfWeek","formattedDate","icon","min","max","toggleDetails","allDays","dayData","scrollableContainer","hour","hourDiv","time","temp","precip","humidity","wind","leftArrow","rightArrow","startX","endX","deltaX","favContainer","selectedCity","newList","city","quotes","currentDay","currentQuote"],"mappings":"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"}