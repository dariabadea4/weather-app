{"version":3,"file":"index.js","sources":["../src/scripts/city-input__functions.js","../src/scripts/city-input.js","../src/scripts/input-cards-api-logic.js"],"sourcesContent":["const favorites = document.querySelector('.viewed-city__favorites-container'),\n  nextBtn = document.querySelector('.viewed-city__next'),\n  prevBtn = document.querySelector('.viewed-city__prev');\n\nconst itemsOnPage = 4;\nlet currentPage = 0;\n\n// store cities in local storage\nconst setCity = (key, value) => {\n  try {\n    const oras = JSON.stringify(value);\n    localStorage.setItem(key, oras);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n//   retrieve cities from local storage\nconst getCity = key => {\n  try {\n    const data = localStorage.getItem(key);\n    return data === null ? undefined : JSON.parse(data);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// remove item from local storage\n\nconst saveCity = value => {\n  const currentState = getCity('orase');\n  if (currentState === undefined) {\n    setCity('orase', [value]);\n  } else {\n    currentState.push(value);\n    setCity('orase', currentState);\n  }\n};\n\nconst shortWord = (str, maxLength) => {\n  if (str.length > maxLength) {\n    return str.substring(0, maxLength) + '...';\n  }\n  return str;\n};\n\n// populate favorites list\n\nconst populateFavorites = () => {\n  const cities = getCity('orase');\n  if (cities === undefined) {\n    return;\n  } else {\n    if (cities.length < 4) {\n      nextBtn.classList.add('hidden');\n    }\n    if(currentPage >= 1){\n      prevBtn.classList.remove('hidden')\n    }\n    favorites.innerHTML = '';\n    const begin = currentPage * itemsOnPage,\n      end = begin + itemsOnPage,\n      pageItems = cities.slice(begin, end);\n\n    pageItems.forEach(item => {\n      const shortCity = shortWord(item, 7);\n      const favorite = `<button class=\"viewed-city\" type=\"button\" value=\"${shortCity}\">\n                                  ${shortCity}\n                                  <svg class=\"viewed-city__close-btn\">\n                                      <use href =\"./city-input-icons.svg#icon-close\"></use>\n                                  </svg>\n                              </button>`;\n      favorites.insertAdjacentHTML('beforeend', favorite);\n    });\n  }\n};\n\nconst nextPage = pageNumber => {\n  const cities = getCity('orase');\n  if ((pageNumber + 1) * itemsOnPage < cities.length) {\n    currentPage++;\n    populateFavorites();\n  }\n};\n\nconst prevPage = pageNumber => {\n  if (pageNumber >= 1) {\n    currentPage --;\n    populateFavorites();\n  }\n};\n\nexport {getCity, saveCity, populateFavorites, nextPage, prevPage, currentPage };\n","import { saveCity } from \"./city-input__functions\";\n\nconst input = document.querySelector('.city-input__field'),\n      favorites= document.querySelector('.star');\nlet inputData;\n\ninput.addEventListener('change', e => {\n  inputData = e.target.value;\n});\n\nfavorites.addEventListener('click', () => {\n  saveCity(inputData);\n});\n\nexport {inputData};","document.addEventListener('DOMContentLoaded', function() {\n  const apiKey = \"20ffa3f3195f1b01715c348123da79a3\";\n\n  // Funcția pentru a obține datele meteo\n  async function getWeather() {\n    const city = document.getElementById('city-input').value;\n    if (!city) {\n      alert(\"Please enter a city name\");\n      return;\n    }\n\n    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${apiKey}`;\n\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"City not found\");\n      }\n      const data = await response.json();\n      displayWeather(data);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n\n\n  // Funcția pentru a afișa datele meteo pe zile\n  function displayWeather(data) {\n    const weatherCardsContainer = document.getElementById('weather-cards');\n    const moreInfoContainer = document.getElementById('more-info-container');\n\n    weatherCardsContainer.innerHTML = '';\n    moreInfoContainer.innerHTML = '';\n\n    const filteredData = data.list.filter(item => item.dt_txt.includes('12:00:00'));\n\n    // Parcurgem fiecare zi și creăm carduri pentru vreme\n    filteredData.forEach((day, index) => {\n      const weatherCard = document.createElement('div');\n      weatherCard.classList.add('weather-card-initial');\n\n      const date = new Date(day.dt_txt);\n      const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });\n      const formattedDate = date.toLocaleDateString('en-GB', { day: 'numeric', month: 'short' });\n      const icon = day.weather[0].icon;\n      const min = Math.round(day.main.temp_min);\n      const max = Math.round(day.main.temp_max);\n\n      weatherCard.innerHTML = `\n      <div class=\"day-weather\">${dayOfWeek}</div>\n      <div class=\"date\">${formattedDate}</div>\n      <img src=\"http://openweathermap.org/img/wn/${icon}.png\" alt=\"${day.weather[0].description}\">\n      <div class=\"min-max\">\n        <div class=\"min\">\n          <div>min</div>\n          <div class=\"degrees\">${min}</div>\n        </div>\n        <div class=\"line\"></div>\n        <div class=\"max\">\n          <div>max</div>\n          <div class=\"degrees\">${max}</div>\n        </div>\n      </div>\n      <button class=\"more-info-btn\">more info</button>\n    `;\n\n      weatherCard.querySelector('.more-info-btn').addEventListener('click', () => toggleDetails(index, data));\n\n      weatherCardsContainer.appendChild(weatherCard);\n    });\n  }\n\n  // Funcția pentru a afișa sau ascunde secțiunea \"More Info\"\n  // Funcția pentru a afișa sau ascunde secțiunea \"More Info\"\n  function toggleDetails(index, data) {\n    const moreInfoContainer = document.getElementById('more-info-container');\n    const allDays = document.querySelectorAll('.weather-card-initial .day-weather');\n\n    // Verificăm dacă secțiunea este deja afișată\n    if (!moreInfoContainer.classList.contains('hidden') && moreInfoContainer.getAttribute('data-index') == index) {\n      moreInfoContainer.classList.add('hidden');\n      moreInfoContainer.innerHTML = ''; // Golim conținutul\n      allDays.forEach(day => day.classList.remove('selected-day')); // Eliminăm clasa 'selected-day'\n      return;\n    }\n\n    moreInfoContainer.classList.remove('hidden');\n    moreInfoContainer.setAttribute('data-index', index);\n\n    // Golim secțiunea înainte de a adăuga conținut nou\n    moreInfoContainer.innerHTML = '';\n\n    const dayData = data.list.slice(index * 8, index * 8 + 7); // Extragem doar primele 7 ore\n\n    allDays.forEach(day => day.classList.remove('selected-day'));\n    const selectedDay = document.querySelectorAll('.weather-card-initial')[index].querySelector('.day-weather');\n    selectedDay.classList.add('selected-day');\n\n    // Afișăm primele 5 carduri by default\n    dayData.forEach((hour, i) => {\n      const hourDiv = document.createElement('div');\n      const time = new Date(hour.dt_txt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n      const temp = Math.round(hour.main.temp);\n      const icon = hour.weather[0].icon;\n      const precip = hour.rain ? hour.rain['3h'] || hour.rain['1h'] || 0 : 0;\n      const humidity = hour.main.humidity;\n      const wind = hour.wind.speed;\n\n      hourDiv.classList.add('hourly-info');\n      if (i < 5) {\n        hourDiv.classList.add('active'); // Afișăm primele 5 carduri by default\n      }\n\n      hourDiv.innerHTML = `\n        <div class=\"weather-card\">\n            <div class=\"time\">${time}</div>\n            <img src=\"http://openweathermap.org/img/wn/${icon}.png\" alt=\"${hour.weather[0].description}\">\n            <div class=\"degrees\">${temp}°C</div>\n            <div class=\"weather-properties\">\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${precip} mm</p>\n                </div>\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${humidity}%</p>\n                </div>\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${wind} m/s</p>\n                </div>\n            </div>\n        </div>\n      `;\n      moreInfoContainer.appendChild(hourDiv);\n    });\n\n\n    let currentIndex = 0;\n\n    const updateSlide = (direction) => {\n      const allCards = document.querySelectorAll('.hourly-info');\n      const totalCards = allCards.length;\n      const visibleCards = Array.from(allCards).slice(currentIndex, currentIndex + 5);\n      const hiddenCards = Array.from(allCards).slice(currentIndex + 5);\n\n\n      visibleCards.forEach(card => card.classList.remove('active'));\n\n      currentIndex += direction;\n      if (currentIndex < 0) currentIndex = 0;\n      if (currentIndex > totalCards - 5) currentIndex = totalCards - 5;\n\n      const newVisibleCards = Array.from(allCards).slice(currentIndex, currentIndex + 5);\n      newVisibleCards.forEach(card => card.classList.add('active'));\n    };\n\n    document.getElementById('prev-slide').addEventListener('click', () => updateSlide(-1));\n    document.getElementById('next-slide').addEventListener('click', () => updateSlide(1));\n\n\n    let startX = 0;\n\n    moreInfoContainer.addEventListener('touchstart', (e) => {\n      startX = e.touches[0].clientX;\n    });\n\n    moreInfoContainer.addEventListener('touchend', (e) => {\n      const endX = e.changedTouches[0].clientX;\n      const deltaX = startX - endX;\n\n      if (deltaX > 50) { // Swipe left\n        updateSlide(1);\n      } else if (deltaX < -50) { // Swipe right\n        updateSlide(-1);\n      }\n    });\n  }\n// Funcția pentru a afișa sau ascunde secțiunea \"More Info\"\n  function toggleDetails(index, data) {\n    const moreInfoContainer = document.getElementById('more-info-container');\n    const allDays = document.querySelectorAll('.weather-card-initial .day-weather');\n\n    // Verificăm dacă secțiunea este deja afișată\n    if (!moreInfoContainer.classList.contains('hidden') && moreInfoContainer.getAttribute('data-index') == index) {\n      moreInfoContainer.classList.add('hidden');\n      moreInfoContainer.innerHTML = ''; // Golim conținutul\n      allDays.forEach(day => day.classList.remove('selected-day')); // Eliminăm clasa 'selected-day'\n      return;\n    }\n\n    moreInfoContainer.classList.remove('hidden');\n    moreInfoContainer.setAttribute('data-index', index);\n\n    // Golim secțiunea înainte de a adăuga conținut nou\n    moreInfoContainer.innerHTML = '';\n\n    const dayData = data.list.slice(index * 8, index * 8 + 7); // Extragem doar primele 7 ore\n\n    allDays.forEach(day => day.classList.remove('selected-day'));\n    const selectedDay = document.querySelectorAll('.weather-card-initial')[index].querySelector('.day-weather');\n    selectedDay.classList.add('selected-day');\n\n    // Cream un container scrollable pentru cardurile orare\n    const scrollableContainer = document.createElement('div');\n    scrollableContainer.classList.add('more-info-scrollable');\n\n    // Afișăm cardurile orare\n    dayData.forEach(hour => {\n      const hourDiv = document.createElement('div');\n      const time = new Date(hour.dt_txt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n      const temp = Math.round(hour.main.temp);\n      const icon = hour.weather[0].icon;\n      const precip = hour.rain ? hour.rain['3h'] || hour.rain['1h'] || 0 : 0;\n      const humidity = hour.main.humidity;\n      const wind = hour.wind.speed;\n\n      hourDiv.classList.add('hourly-info');\n      hourDiv.innerHTML = `\n        <div class=\"weather-card\">\n            <div class=\"time\">${time}</div>\n            <img src=\"http://openweathermap.org/img/wn/${icon}.png\" alt=\"${hour.weather[0].description}\">\n            <div class=\"degrees\">${temp}°C</div>\n            <div class=\"weather-properties\">\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${precip} mm</p>\n                </div>\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${humidity}%</p>\n                </div>\n                <div class=\"property-details\">\n                    <p class=\"property-detail\">${wind} m/s</p>\n                </div>\n            </div>\n        </div>\n      `;\n      scrollableContainer.appendChild(hourDiv);\n    });\n\n    // Funcția pentru derularea containerului cu carduri\n    const weatherCardsContainer = document.getElementById('weather-cards');\n    const leftArrow = document.getElementById('left-arrow');\n    const rightArrow = document.getElementById('right-arrow');\n\n    leftArrow.addEventListener('click', () => {\n      weatherCardsContainer.scrollBy({ left: -300, behavior: 'smooth' });\n    });\n\n    rightArrow.addEventListener('click', () => {\n      weatherCardsContainer.scrollBy({ left: 300, behavior: 'smooth' });\n    });\n\n    // Adăugăm containerul scrollable la secțiunea more-info\n    moreInfoContainer.appendChild(scrollableContainer);\n\n    // Logica pentru swipe pe dispozitive mobile\n    let startX = 0;\n\n    scrollableContainer.addEventListener('touchstart', (e) => {\n      startX = e.touches[0].clientX;\n    });\n\n    scrollableContainer.addEventListener('touchend', (e) => {\n      const endX = e.changedTouches[0].clientX;\n      const deltaX = startX - endX;\n\n      if (deltaX > 50) {\n        scrollableContainer.scrollBy({ left: 300, behavior: 'smooth' }); // Scroll la dreapta\n      } else if (deltaX < -50) {\n        scrollableContainer.scrollBy({ left: -300, behavior: 'smooth' }); // Scroll la stânga\n      }\n    });\n  }\n\n  let debounceTimer;\n  document.getElementById('city-input').addEventListener('input', function() {\n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout(getWeather, 500);\n  });\n  // document.getElementById('get-weather-btn').addEventListener('click', getWeather);\n});\n"],"names":["setCity","key","value","oras","err","getCity","data","error","saveCity","currentState","input","favorites","inputData","e","apiKey","getWeather","city","url","response","displayWeather","weatherCardsContainer","moreInfoContainer","item","day","index","weatherCard","date","dayOfWeek","formattedDate","icon","min","max","toggleDetails","allDays","dayData","scrollableContainer","hour","hourDiv","time","temp","precip","humidity","wind","leftArrow","rightArrow","startX","endX","deltaX","debounceTimer"],"mappings":"ssBAAkB,SAAS,cAAc,mCAAmC,EAChE,SAAS,cAAc,oBAAoB,EAC3C,SAAS,cAAc,oBAAoB,EAMvD,MAAMA,EAAU,CAACC,EAAKC,IAAU,CAC9B,GAAI,CACF,MAAMC,EAAO,KAAK,UAAUD,CAAK,EACjC,aAAa,QAAQD,EAAKE,CAAI,CAC/B,OAAQC,EAAK,CACZ,QAAQ,IAAIA,CAAG,CAChB,CACH,EAGMC,EAAUJ,GAAO,CACrB,GAAI,CACF,MAAMK,EAAO,aAAa,QAAQL,CAAG,EACrC,OAAOK,IAAS,KAAO,OAAY,KAAK,MAAMA,CAAI,CACnD,OAAQC,EAAO,CACd,QAAQ,IAAIA,CAAK,CAClB,CACH,EAIMC,EAAWN,GAAS,CACxB,MAAMO,EAAeJ,EAAQ,OAAO,EAChCI,IAAiB,OACnBT,EAAQ,QAAS,CAACE,CAAK,CAAC,GAExBO,EAAa,KAAKP,CAAK,EACvBF,EAAQ,QAASS,CAAY,EAEjC,ECnCMC,EAAQ,SAAS,cAAc,oBAAoB,EACnDC,EAAW,SAAS,cAAc,OAAO,EAC/C,IAAIC,EAEJF,EAAM,iBAAiB,SAAUG,GAAK,CACpCD,EAAYC,EAAE,OAAO,KACvB,CAAC,EAEDF,EAAU,iBAAiB,QAAS,IAAM,CACxCH,EAASI,CAAS,CACpB,CAAC,ECZD,SAAS,iBAAiB,mBAAoB,UAAW,CACvD,MAAME,EAAS,mCAGf,eAAeC,GAAa,CAC1B,MAAMC,EAAO,SAAS,eAAe,YAAY,EAAE,MACnD,GAAI,CAACA,EAAM,CACT,MAAM,0BAA0B,EAChC,MACD,CAED,MAAMC,EAAM,sDAAsDD,CAAI,uBAAuBF,CAAM,GAEnG,GAAI,CACF,MAAMI,EAAW,MAAM,MAAMD,CAAG,EAChC,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,gBAAgB,EAElC,MAAMZ,EAAO,MAAMY,EAAS,OAC5BC,EAAeb,CAAI,CACpB,OAAQC,EAAO,CACd,MAAMA,EAAM,OAAO,CACpB,CACF,CAID,SAASY,EAAeb,EAAM,CAC5B,MAAMc,EAAwB,SAAS,eAAe,eAAe,EAC/DC,EAAoB,SAAS,eAAe,qBAAqB,EAEvED,EAAsB,UAAY,GAClCC,EAAkB,UAAY,GAETf,EAAK,KAAK,OAAOgB,GAAQA,EAAK,OAAO,SAAS,UAAU,CAAC,EAGjE,QAAQ,CAACC,EAAKC,IAAU,CACnC,MAAMC,EAAc,SAAS,cAAc,KAAK,EAChDA,EAAY,UAAU,IAAI,sBAAsB,EAEhD,MAAMC,EAAO,IAAI,KAAKH,EAAI,MAAM,EAC1BI,EAAYD,EAAK,mBAAmB,QAAS,CAAE,QAAS,MAAM,CAAE,EAChEE,EAAgBF,EAAK,mBAAmB,QAAS,CAAE,IAAK,UAAW,MAAO,OAAO,CAAE,EACnFG,EAAON,EAAI,QAAQ,CAAC,EAAE,KACtBO,EAAM,KAAK,MAAMP,EAAI,KAAK,QAAQ,EAClCQ,EAAM,KAAK,MAAMR,EAAI,KAAK,QAAQ,EAExCE,EAAY,UAAY;AAAA,iCACGE,CAAS;AAAA,0BAChBC,CAAa;AAAA,mDACYC,CAAI,cAAcN,EAAI,QAAQ,CAAC,EAAE,WAAW;AAAA;AAAA;AAAA;AAAA,iCAI9DO,CAAG;AAAA;AAAA;AAAA;AAAA;AAAA,iCAKHC,CAAG;AAAA;AAAA;AAAA;AAAA,MAM9BN,EAAY,cAAc,gBAAgB,EAAE,iBAAiB,QAAS,IAAMO,EAAcR,EAAOlB,CAAI,CAAC,EAEtGc,EAAsB,YAAYK,CAAW,CACnD,CAAK,CACF,CA0GD,SAASO,EAAcR,EAAOlB,EAAM,CAClC,MAAMe,EAAoB,SAAS,eAAe,qBAAqB,EACjEY,EAAU,SAAS,iBAAiB,oCAAoC,EAG9E,GAAI,CAACZ,EAAkB,UAAU,SAAS,QAAQ,GAAKA,EAAkB,aAAa,YAAY,GAAKG,EAAO,CAC5GH,EAAkB,UAAU,IAAI,QAAQ,EACxCA,EAAkB,UAAY,GAC9BY,EAAQ,QAAQV,GAAOA,EAAI,UAAU,OAAO,cAAc,CAAC,EAC3D,MACD,CAEDF,EAAkB,UAAU,OAAO,QAAQ,EAC3CA,EAAkB,aAAa,aAAcG,CAAK,EAGlDH,EAAkB,UAAY,GAE9B,MAAMa,EAAU5B,EAAK,KAAK,MAAMkB,EAAQ,EAAGA,EAAQ,EAAI,CAAC,EAExDS,EAAQ,QAAQV,GAAOA,EAAI,UAAU,OAAO,cAAc,CAAC,EACvC,SAAS,iBAAiB,uBAAuB,EAAEC,CAAK,EAAE,cAAc,cAAc,EAC9F,UAAU,IAAI,cAAc,EAGxC,MAAMW,EAAsB,SAAS,cAAc,KAAK,EACxDA,EAAoB,UAAU,IAAI,sBAAsB,EAGxDD,EAAQ,QAAQE,GAAQ,CACtB,MAAMC,EAAU,SAAS,cAAc,KAAK,EACtCC,EAAO,IAAI,KAAKF,EAAK,MAAM,EAAE,mBAAmB,CAAE,EAAE,CAAE,KAAM,UAAW,OAAQ,SAAW,CAAA,EAC1FG,EAAO,KAAK,MAAMH,EAAK,KAAK,IAAI,EAChCP,EAAOO,EAAK,QAAQ,CAAC,EAAE,KACvBI,EAASJ,EAAK,OAAOA,EAAK,KAAK,IAAI,GAAKA,EAAK,KAAK,IAAI,IAAK,EAC3DK,EAAWL,EAAK,KAAK,SACrBM,EAAON,EAAK,KAAK,MAEvBC,EAAQ,UAAU,IAAI,aAAa,EACnCA,EAAQ,UAAY;AAAA;AAAA,gCAEMC,CAAI;AAAA,yDACqBT,CAAI,cAAcO,EAAK,QAAQ,CAAC,EAAE,WAAW;AAAA,mCACnEG,CAAI;AAAA;AAAA;AAAA,iDAGUC,CAAM;AAAA;AAAA;AAAA,iDAGNC,CAAQ;AAAA;AAAA;AAAA,iDAGRC,CAAI;AAAA;AAAA;AAAA;AAAA,QAK/CP,EAAoB,YAAYE,CAAO,CAC7C,CAAK,EAGD,MAAMjB,EAAwB,SAAS,eAAe,eAAe,EAC/DuB,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAa,SAAS,eAAe,aAAa,EAExDD,EAAU,iBAAiB,QAAS,IAAM,CACxCvB,EAAsB,SAAS,CAAE,KAAM,KAAM,SAAU,QAAQ,CAAE,CACvE,CAAK,EAEDwB,EAAW,iBAAiB,QAAS,IAAM,CACzCxB,EAAsB,SAAS,CAAE,KAAM,IAAK,SAAU,QAAQ,CAAE,CACtE,CAAK,EAGDC,EAAkB,YAAYc,CAAmB,EAGjD,IAAIU,EAAS,EAEbV,EAAoB,iBAAiB,aAAe,GAAM,CACxDU,EAAS,EAAE,QAAQ,CAAC,EAAE,OAC5B,CAAK,EAEDV,EAAoB,iBAAiB,WAAa,GAAM,CACtD,MAAMW,EAAO,EAAE,eAAe,CAAC,EAAE,QAC3BC,EAASF,EAASC,EAEpBC,EAAS,GACXZ,EAAoB,SAAS,CAAE,KAAM,IAAK,SAAU,QAAQ,CAAE,EACrDY,EAAS,KAClBZ,EAAoB,SAAS,CAAE,KAAM,KAAM,SAAU,QAAQ,CAAE,CAEvE,CAAK,CACF,CAED,IAAIa,EACJ,SAAS,eAAe,YAAY,EAAE,iBAAiB,QAAS,UAAW,CACzE,aAAaA,CAAa,EAC1BA,EAAgB,WAAWjC,EAAY,GAAG,CAC9C,CAAG,CAEH,CAAC"}